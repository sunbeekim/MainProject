<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">

    <!-- 사용자 등록 - hobby 필드 제거 -->
    <insert id="insertUser" parameterType="com.example.demo.model.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO Users (
            email,
            password_hash,
            name,
            phone_number,
            nickname,
            bio,
            login_method,
            social_provider,
            account_status,
            authority,
            signup_date,
            last_update_date,
            last_login_time,
            login_failed_attempts,
            login_is_locked
        ) VALUES (
                     #{email},
                     #{passwordHash},
                     #{name},
                     #{phoneNumber},
                     #{nickname},
                     #{bio},
                     #{loginMethod},
                     #{socialProvider},
                     #{accountStatus},
                     #{authority},
                     #{signupDate},
                     #{lastUpdateDate},
                     #{lastLoginTime},
                     #{loginFailedAttempts},
                     #{loginIsLocked}
                 )
    </insert>

    <!-- 사용자 계정 정보 등록 -->
    <insert id="insertUserAccountInfo" parameterType="com.example.demo.model.UserAccountInfo">
        INSERT INTO User_Account_info (
            email,
            account_status,
            authority,
            authority_name
        ) VALUES (
                     #{email},
                     #{accountStatus},
                     #{authority},
                     #{authorityName}
                 )
    </insert>

    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" parameterType="string" resultType="com.example.demo.model.User">
        SELECT * FROM Users WHERE email = #{email}
    </select>

    <!-- 전화번호로 사용자 조회 -->
    <select id="findByPhoneNumber" parameterType="string" resultType="com.example.demo.model.User">
        SELECT * FROM Users WHERE phone_number = #{phoneNumber}
    </select>

    <!-- 닉네임으로 사용자 조회 -->
    <select id="findByNickname" parameterType="string" resultType="com.example.demo.model.User">
        SELECT * FROM Users WHERE nickname = #{nickname}
    </select>

    <!-- 로그인 실패 횟수 업데이트 -->
    <update id="updateFailedLoginAttempts">
        UPDATE Users
        SET login_failed_attempts = #{attempts}
        WHERE email = #{email}
    </update>

    <!-- 로그인 잠금 상태 업데이트 -->
    <update id="updateLoginLockStatus">
        UPDATE Users
        SET login_is_locked = #{isLocked}
        WHERE email = #{email}
    </update>

    <!-- 마지막 로그인 시간 업데이트 -->
    <update id="updateLoginTime">
        UPDATE Users
        SET last_login_time = NOW()
        WHERE email = #{email}
    </update>

    <!-- 비밀번호 해시 업데이트 -->
    <update id="updateUserPasswordHash">
        UPDATE Users
        SET password_hash = #{newPasswordHash}
        WHERE email = #{email}
    </update>

    <!-- 계정 상태 업데이트 -->
    <update id="updateAccountStatus">
        UPDATE User_Account_info
        SET account_status = #{accountStatus}
        WHERE email = #{email}
    </update>

    <!-- 사용자의 취미 목록 조회 -->
    <select id="findHobbiesByEmail" parameterType="string" resultType="com.example.demo.model.Hobby">
        SELECT h.*
        FROM Hobbies h
        JOIN UserHobbies uh ON h.hobby_id = uh.hobby_id
        JOIN Users u ON uh.email = u.email
        WHERE u.email = #{email}
    </select>

    <!-- 사용자 위치 정보 조회 -->
    <select id="findLocationByEmail" parameterType="string" resultType="com.example.demo.model.UserLocation">
        SELECT *
        FROM UserLocation
        WHERE email = #{email}
    </select>

    <!-- 사용자-취미 연결 정보 추가 -->
    <insert id="insertUserHobby">
        INSERT INTO UserHobbies (email, hobby_id)
        VALUES (#{email}, #{hobbyId})
    </insert>

</mapper>
