<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">

    <!-- 사용자 등록 - hobby 필드 제거 -->
    <insert id="insertUser" parameterType="com.example.demo.model.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO Users (
            email,
            password_hash,
            name,
            phone_number,
            nickname,
            bio,
            login_method,
            social_provider,
            account_status,
            authority,
            signup_date,
            last_update_date,
            last_login_time,
            login_failed_attempts,
            login_is_locked
        ) VALUES (
            #{email},
            #{passwordHash},
            #{name},
            #{phoneNumber},
            #{nickname},
            #{bio},
            #{loginMethod},
            #{socialProvider},
            #{accountStatus},
            #{authority},
            #{signupDate},
            #{lastUpdateDate},
            #{lastLoginTime},
            #{loginFailedAttempts},
            #{loginIsLocked}
        )
    </insert>

    <!-- 사용자 계정 정보 등록 -->
    <insert id="insertUserAccountInfo" parameterType="com.example.demo.model.UserAccountInfo">
        INSERT INTO User_Account_info (
            email,
            account_status,
            authority,
            authority_name
        ) VALUES (
                     #{email},
                     #{accountStatus},
                     #{authority},
                     #{authorityName}
                 )
    </insert>

    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" parameterType="string" resultType="com.example.demo.model.User">
        SELECT * FROM Users WHERE email = #{email}
    </select>

    <!-- 전화번호로 사용자 조회 -->
    <select id="findByPhoneNumber" parameterType="string" resultType="com.example.demo.model.User">
        SELECT * FROM Users WHERE phone_number = #{phoneNumber}
    </select>

    <!-- 닉네임으로 사용자 조회 -->
    <select id="findByNickname" parameterType="string" resultType="com.example.demo.model.User">
        SELECT * FROM Users WHERE nickname = #{nickname}
    </select>

    <!-- 로그인 실패 횟수 업데이트 -->
    <update id="updateFailedLoginAttempts">
        UPDATE Users
        SET login_failed_attempts = #{attempts}
        WHERE email = #{email}
    </update>

    <!-- 로그인 잠금 상태 업데이트 -->
    <update id="updateLoginLockStatus">
        UPDATE Users
        SET login_is_locked = #{isLocked}
        WHERE email = #{email}
    </update>

    <!-- 마지막 로그인 시간 업데이트 -->
    <update id="updateLoginTime">
        UPDATE Users
        SET last_login_time = NOW()
        WHERE email = #{email}
    </update>

    <!-- 비밀번호 해시 업데이트 -->
    <update id="updateUserPasswordHash">
        UPDATE Users
        SET password_hash = #{newPasswordHash}
        WHERE email = #{email}
    </update>

    <!-- 계정 상태 업데이트 -->
    <update id="updateAccountStatus">
        UPDATE User_Account_info
        SET account_status = #{accountStatus}
        WHERE email = #{email}
    </update>

    <!-- 프로필 정보 업데이트 (전화번호 제외) -->
    <update id="updateUserProfile" parameterType="com.example.demo.model.User">
        UPDATE Users
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="nickname != null">nickname = #{nickname},</if>
            <!-- 전화번호 업데이트 코드 제거 -->
            <if test="bio != null">bio = #{bio},</if>
            <if test="profileImagePath != null">profile_image_path = #{profileImagePath},</if>
            last_update_date = NOW()
        </set>
        WHERE email = #{email}
    </update>
    
    <!-- 이메일을 제외한 닉네임 중복 확인 (새로 추가) -->
    <select id="findByNicknameExceptEmail" resultType="com.example.demo.model.User">
        SELECT * FROM Users
        WHERE nickname = #{nickname}
        AND email != #{email}
    </select>
    
    <!-- 이메일을 제외한 전화번호 중복 확인 (새로 추가) -->
    <select id="findByPhoneNumberExceptEmail" resultType="com.example.demo.model.User">
        SELECT * FROM Users
        WHERE phone_number = #{phoneNumber}
        AND email != #{email}
    </select>
    
    <!-- 회원 탈퇴 (소프트 삭제) -->
    <update id="withdrawUser">
        UPDATE Users
        SET 
            account_status = 'Withdrawal',
            last_update_date = #{withdrawalDate}
        WHERE email = #{email}
    </update>
    
    <!-- 회원 탈퇴 시 사용자 정보 익명화 -->
    <update id="anonymizeUserData">
        UPDATE Users
        SET 
            nickname = #{nickname},
            phone_number = #{phoneNumber},
            bio = #{bio},
            profile_image_path = NULL, <!-- 프로필 이미지 제거 -->
            account_status = 'Withdrawal',
            last_update_date = #{withdrawalDate}
        WHERE email = #{email}
    </update>
    
    <!-- 계정 정보 테이블의 계정 상태 업데이트 -->
    <update id="updateUserAccountInfoStatus">
        UPDATE User_Account_info
        SET account_status = #{accountStatus}
        WHERE email = #{email}
    </update>

    <!-- 프로필 이미지 경로 업데이트 -->
    <update id="updateProfileImagePath">
        UPDATE Users
        SET profile_image_path = #{profileImagePath},
            last_update_date = NOW()
        WHERE email = #{email}
    </update>

    <!-- 사용자의 초기 도파민 수치 설정 -->
    <insert id="initializeUserDopamine">
        INSERT INTO PointsDopamineActivity (email, points, dopamine, point_dopamine_activity_time)
        VALUES (#{email}, 0, #{dopamineValue}, NOW())
    </insert>

    <!-- 사용자의 도파민 수치 조회 -->
    <select id="getUserDopamine" parameterType="string" resultType="int">
        SELECT dopamine
        FROM PointsDopamineActivity
        WHERE email = #{email}
        ORDER BY point_dopamine_activity_time DESC
        LIMIT 1
    </select>

</mapper>
