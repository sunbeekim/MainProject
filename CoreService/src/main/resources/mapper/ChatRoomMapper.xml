<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.ChatRoomMapper">

    <!-- 채팅방 생성 -->
    <insert id="createChatRoom" parameterType="com.example.demo.model.chat.ChatRoom" 
            useGeneratedKeys="true" keyProperty="chatroomId">
        INSERT INTO chatrooms (
            chatname, 
            productId, 
            buyerEmail, 
            lastMessage, 
            lastMessageTime,
            status, 
            createdAt, 
            updatedAt
        ) VALUES (
            #{chatname}, 
            #{productId}, 
            #{buyerEmail}, 
            #{lastMessage}, 
            #{lastMessageTime},
            #{status}, 
            NOW(), 
            NOW()
        )
    </insert>

    <!-- 채팅방 ID로 조회 - 매개변수 순서 수정 -->
    <select id="findChatRoomById" resultMap="chatRoomResultMap">
        SELECT 
            cr.chatroomId,
            cr.chatname,
            cr.productId,
            cr.buyerEmail,
            cr.lastMessage,
            cr.lastMessageTime,
            cr.status,
            cr.createdAt,
            cr.updatedAt,
            p.email AS sellerEmail,
            (SELECT COUNT(*) FROM messages m 
             WHERE m.chatroomId = cr.chatroomId 
             AND m.senderEmail != #{email}
             AND m.isRead = false) AS unreadCount
        FROM 
            chatrooms cr
        JOIN 
            products p ON cr.productId = p.id
        WHERE 
            cr.chatroomId = #{chatroomId}
    </select>

    <!-- 상품ID와 구매자로 채팅방 조회 -->
    <select id="findChatRoomByProductAndBuyer" resultMap="chatRoomResultMap">
        SELECT 
            cr.chatroomId,
            cr.chatname,
            cr.productId,
            cr.buyerEmail,
            cr.lastMessage,
            cr.lastMessageTime,
            cr.status,
            cr.createdAt,
            cr.updatedAt,
            p.email AS sellerEmail
        FROM 
            chatrooms cr
        JOIN 
            products p ON cr.productId = p.id
        WHERE 
            cr.productId = #{productId}
            AND cr.buyerEmail = #{buyerEmail}
        LIMIT 1
    </select>

    <!-- 사용자와 관련된 채팅방 목록 조회 - ProductImages 테이블 활용 -->
    <select id="findChatRoomsByUser" parameterType="string" resultMap="chatRoomResultMap">
        SELECT 
            cr.chatroomId,
            cr.chatname,
            cr.productId,
            cr.buyerEmail,
            cr.lastMessage,
            cr.lastMessageTime,
            cr.status,
            cr.createdAt,
            cr.updatedAt,
            p.email AS sellerEmail,
            p.title AS productName,
            (SELECT pi.image_path FROM ProductImages pi 
             WHERE pi.product_id = p.id AND pi.is_thumbnail = TRUE 
             LIMIT 1) AS productImageUrl,
            CASE 
                WHEN p.email = #{email} THEN (SELECT nickname FROM Users WHERE email = cr.buyerEmail)
                ELSE (SELECT nickname FROM Users WHERE email = p.email)
            END AS otherUserName,
            (SELECT COUNT(*) FROM messages m 
             WHERE m.chatroomId = cr.chatroomId 
             AND m.senderEmail != #{email}
             AND m.isRead = false) AS unreadCount
        FROM 
            chatrooms cr
        JOIN 
            products p ON cr.productId = p.id
        WHERE 
            cr.buyerEmail = #{email} 
            OR p.email = #{email}
        ORDER BY 
            cr.lastMessageTime DESC
    </select>

    <!-- 채팅방 정보 업데이트 -->
    <update id="updateChatRoom" parameterType="com.example.demo.model.chat.ChatRoom">
        UPDATE chatrooms
        SET
            lastMessage = #{lastMessage},
            lastMessageTime = #{lastMessageTime},
            status = #{status},
            updatedAt = NOW()
        WHERE
            chatroomId = #{chatroomId}
    </update>

    <!-- 채팅방 상태 변경 -->
    <update id="updateChatRoomStatus">
        UPDATE chatrooms
        SET 
            status = #{status},
            updatedAt = NOW()
        WHERE
            chatroomId = #{chatroomId}
    </update>

    <!-- ChatRoom 결과 매핑 -->
    <resultMap id="chatRoomResultMap" type="com.example.demo.model.chat.ChatRoom">
        <id property="chatroomId" column="chatroomId" />
        <result property="chatname" column="chatname" />
        <result property="productId" column="productId" />
        <result property="buyerEmail" column="buyerEmail" />
        <result property="sellerEmail" column="sellerEmail" />
        <result property="lastMessage" column="lastMessage" />
        <result property="lastMessageTime" column="lastMessageTime" />
        <result property="status" column="status" />
        <result property="createdAt" column="createdAt" />
        <result property="updatedAt" column="updatedAt" />
        <result property="unreadCount" column="unreadCount" />
        
        <!-- 추가 조인 필드 -->
        <result property="productName" column="productName" />
        <result property="productImageUrl" column="productImageUrl" />
        <result property="otherUserName" column="otherUserName" />
    </resultMap>

</mapper>
