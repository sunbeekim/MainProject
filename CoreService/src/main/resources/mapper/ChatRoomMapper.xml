<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.ChatRoomMapper">

    <!-- 채팅방 생성 (sellerEmail 필드 제거) -->
    <insert id="createChatRoom" parameterType="com.example.demo.model.chat.ChatRoom" useGeneratedKeys="true" keyProperty="chatroomId">
        INSERT INTO chatrooms (
            chatname, 
            product_id, 
            buyer_email, 
            last_message, 
            last_message_time,
            status,
            created_at, 
            updated_at
        ) VALUES (
            #{chatname}, 
            #{productId}, 
            #{buyerEmail}, 
            #{lastMessage}, 
            #{lastMessageTime},
            #{status, jdbcType=VARCHAR},
            NOW(), 
            NOW()
        )
    </insert>
    
    <!-- 채팅방 조회 (채팅방 ID로) - JOIN을 사용해 판매자 정보 가져옴 -->
    <select id="findChatRoomById" parameterType="int" resultType="com.example.demo.model.chat.ChatRoom">
        SELECT 
            c.chatroom_id as chatroomId,
            c.chatname,
            c.product_id as productId,
            p.email as sellerEmail,  <!-- products 테이블에서 판매자 이메일 가져옴 -->
            c.buyer_email as buyerEmail,
            c.last_message as lastMessage,
            c.last_message_time as lastMessageTime,
            c.status,
            c.created_at as createdAt,
            c.updated_at as updatedAt
        FROM chatrooms c
        JOIN products p ON c.product_id = p.id
        WHERE c.chatroom_id = #{chatroomId}
    </select>

    <!-- 특정 상품에 대한 판매자와 구매자 간의 채팅방 조회 (sellerEmail 제거) -->
    <select id="findChatRoomByProductAndBuyer" resultType="com.example.demo.model.chat.ChatRoom">
        SELECT 
            c.chatroom_id as chatroomId,
            c.chatname,
            c.product_id as productId,
            p.email as sellerEmail,
            c.buyer_email as buyerEmail,
            c.last_message as lastMessage,
            c.last_message_time as lastMessageTime,
            c.status,
            c.created_at as createdAt,
            c.updated_at as updatedAt
        FROM chatrooms c
        JOIN products p ON c.product_id = p.id
        WHERE c.product_id = #{productId}
          AND c.buyer_email = #{buyerEmail}
    </select>
    
    <!-- 사용자가 참여한 모든 채팅방 조회 - 판매자 또는 구매자로 -->
    <select id="findChatRoomsByUser" parameterType="string" resultType="com.example.demo.model.chat.ChatRoom">
        SELECT 
            c.chatroom_id as chatroomId,
            c.chatname,
            c.product_id as productId,
            p.email as sellerEmail,
            c.buyer_email as buyerEmail,
            c.last_message as lastMessage,
            c.last_message_time as lastMessageTime,
            c.status,
            c.created_at as createdAt,
            c.updated_at as updatedAt
        FROM chatrooms c
        JOIN products p ON c.product_id = p.id
        WHERE 
            p.email = #{email} OR  <!-- 판매자인 경우 -->
            c.buyer_email = #{email}  <!-- 구매자인 경우 -->
        ORDER BY c.last_message_time DESC NULLS LAST
    </select>
    
    <!-- 판매자로 참여한 채팅방 목록 조회 -->
    <select id="findChatRoomsBySeller" parameterType="string" resultType="com.example.demo.model.chat.ChatRoom">
        SELECT 
            c.chatroom_id as chatroomId,
            c.chatname,
            c.product_id as productId,
            p.email as sellerEmail,
            c.buyer_email as buyerEmail,
            c.last_message as lastMessage,
            c.last_message_time as lastMessageTime,
            c.status,
            c.created_at as createdAt,
            c.updated_at as updatedAt
        FROM chatrooms c
        JOIN products p ON c.product_id = p.id
        WHERE p.email = #{sellerEmail}
        ORDER BY c.last_message_time DESC NULLS LAST
    </select>
    
    <!-- 구매자로 참여한 채팅방 목록 조회 -->
    <select id="findChatRoomsByBuyer" parameterType="string" resultType="com.example.demo.model.chat.ChatRoom">
        SELECT 
            c.chatroom_id as chatroomId,
            c.chatname,
            c.product_id as productId,
            p.email as sellerEmail,
            c.buyer_email as buyerEmail,
            c.last_message as lastMessage,
            c.last_message_time as lastMessageTime,
            c.status,
            c.created_at as createdAt,
            c.updated_at as updatedAt
        FROM chatrooms c
        JOIN products p ON c.product_id = p.id
        WHERE c.buyer_email = #{buyerEmail}
        ORDER BY c.last_message_time DESC NULLS LAST
    </select>
    
    <!-- 채팅방의 마지막 메시지 및 시간 업데이트 -->
    <update id="updateChatRoomLastMessage">
        UPDATE chatrooms
        SET 
            last_message = #{lastMessage},
            last_message_time = #{lastMessageTime},
            updated_at = NOW()
        WHERE chatroom_id = #{chatroomId}
    </update>
</mapper>
