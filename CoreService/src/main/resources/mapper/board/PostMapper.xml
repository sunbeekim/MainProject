<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.board.PostMapper">
    
    <!-- 게시글 생성 -->
    <insert id="createPost" parameterType="com.example.demo.model.board.Post" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO board_posts (
            board_id, author_email, title, content, created_at, updated_at, is_deleted, view_count, like_count, comment_count
        ) VALUES (
            #{boardId}, #{authorEmail}, #{title}, #{content}, NOW(), NOW(), false, 0, 0, 0
        )
    </insert>
    
    <!-- 게시글 이미지 추가 -->
    <insert id="addPostImage" parameterType="com.example.demo.model.board.PostImage">
        INSERT INTO board_post_images (
            post_id, image_url, created_at
        ) VALUES (
            #{postId}, #{imageUrl}, NOW()
        )
    </insert>
    
    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="com.example.demo.model.board.Post">
        UPDATE board_posts
        SET 
            title = #{title},
            content = #{content},
            updated_at = NOW()
        WHERE 
            id = #{id}
            AND author_email = #{authorEmail}
            AND is_deleted = false
    </update>
    
    <!-- 게시글 삭제 (소프트 삭제) -->
    <update id="deletePost">
        UPDATE board_posts
        SET 
            is_deleted = true,
            deleted_at = NOW()
        WHERE 
            id = #{id}
            AND author_email = #{email}
    </update>
    
    <!-- 게시글 조회 (ID로) -->
    <select id="getPostById" resultMap="postResultMap">
        SELECT 
            p.*,
            b.name as board_name,
            u.name as author_name,
            u.nickname as author_nickname,
            u.profile_image_path as author_profile_image
        FROM 
            board_posts p
            LEFT JOIN boards b ON p.board_id = b.id
            LEFT JOIN users u ON p.author_email = u.email
        WHERE 
            p.id = #{id}
            AND p.is_deleted = false
    </select>
    
    <!-- 게시글 조회수 증가 -->
    <update id="increaseViewCount">
        UPDATE board_posts
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>
    
    <!-- 게시글 좋아요 수 증가 -->
    <update id="incrementLikeCount">
        UPDATE board_posts
        SET like_count = like_count + 1
        WHERE id = #{postId}
    </update>

    <!-- 게시글 좋아요 수 감소 -->
    <update id="decrementLikeCount">
        UPDATE board_posts
        SET like_count = GREATEST(like_count - 1, 0)
        WHERE id = #{postId}
    </update>
    
    <!-- 게시판 내 게시글 목록 조회 -->
    <select id="getPostsByBoardId" resultMap="postResultMap">
        SELECT 
            p.*,
            b.name as board_name,
            u.name as author_name,
            u.nickname as author_nickname,
            u.profile_image_path as author_profile_image
        FROM 
            board_posts p
            LEFT JOIN boards b ON p.board_id = b.id
            LEFT JOIN users u ON p.author_email = u.email
        WHERE 
            p.board_id = #{boardId}
            AND p.is_deleted = false
        ORDER BY 
            p.created_at DESC
    </select>
    
    <!-- 게시판 내 게시글 개수 조회 -->
    <select id="countPostsByBoardId" resultType="int">
        SELECT COUNT(*)
        FROM board_posts
        WHERE board_id = #{boardId}
        AND is_deleted = false
    </select>
    
    <!-- 사용자가 작성한 게시글 목록 조회 -->
    <select id="getPostsByAuthorEmail" resultMap="postResultMap">
        SELECT 
            p.*,
            b.name as board_name,
            u.name as author_name,
            u.nickname as author_nickname,
            u.profile_image_path as author_profile_image
        FROM 
            board_posts p
            LEFT JOIN boards b ON p.board_id = b.id
            LEFT JOIN users u ON p.author_email = u.email
        WHERE 
            p.author_email = #{email}
            AND p.is_deleted = false
        ORDER BY 
            p.created_at DESC
    </select>
    
    <!-- 게시글의 이미지 목록 조회 -->
    <select id="getPostImagesByPostId" resultType="com.example.demo.model.board.PostImage">
        SELECT 
            id, post_id as postId, image_url as imageUrl, created_at as createdAt
        FROM 
            board_post_images
        WHERE 
            post_id = #{postId}
        ORDER BY 
            created_at ASC
    </select>
    
    <!-- 게시글 이미지 삭제 -->
    <delete id="deletePostImages">
        DELETE FROM board_post_images
        WHERE post_id = #{postId}
    </delete>
    
    <!-- 게시글 검색 -->
    <select id="searchPosts" resultMap="postResultMap">
        SELECT 
            p.*,
            b.name as board_name,
            u.name as author_name,
            u.nickname as author_nickname,
            u.profile_image_path as author_profile_image
        FROM 
            board_posts p
            LEFT JOIN boards b ON p.board_id = b.id
            LEFT JOIN users u ON p.author_email = u.email
        WHERE 
            p.board_id = #{boardId}
            AND p.is_deleted = false
            AND (
                p.title LIKE CONCAT('%', #{keyword}, '%') OR
                p.content LIKE CONCAT('%', #{keyword}, '%')
            )
        ORDER BY 
            p.created_at DESC
    </select>
    
    <!-- 고급 검색 및 필터링 쿼리 -->
    <select id="findPostsWithFilters" resultMap="postResultMap">
        SELECT 
            p.*,
            b.name as board_name,
            u.name as author_name,
            u.nickname as author_nickname,
            u.profile_image_path as author_profile_image
        FROM 
            board_posts p
            LEFT JOIN boards b ON p.board_id = b.id
            LEFT JOIN users u ON p.author_email = u.email
        <where>
            p.board_id = #{boardId}
            AND p.is_deleted = false
            
            <if test="keyword != null and keyword != ''">
                <choose>
                    <when test="searchField == 'title'">
                        AND p.title LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="searchField == 'content'">
                        AND p.content LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="searchField == 'author'">
                        AND (u.name LIKE CONCAT('%', #{keyword}, '%') 
                        OR u.nickname LIKE CONCAT('%', #{keyword}, '%'))
                    </when>
                    <otherwise>
                        AND (p.title LIKE CONCAT('%', #{keyword}, '%') 
                        OR p.content LIKE CONCAT('%', #{keyword}, '%'))
                    </otherwise>
                </choose>
            </if>
            
            <if test="startDate != null">
                AND p.created_at &gt;= #{startDate}
            </if>
            
            <if test="endDate != null">
                AND p.created_at &lt;= #{endDate}
            </if>
        </where>
        
        <choose>
            <when test="sortBy == 'viewCount'">
                ORDER BY p.view_count ${sortDirection}
            </when>
            <when test="sortBy == 'likeCount'">
                ORDER BY p.like_count ${sortDirection}
            </when>
            <when test="sortBy == 'commentCount'">
                ORDER BY p.comment_count ${sortDirection}
            </when>
            <otherwise>
                ORDER BY p.created_at ${sortDirection}
            </otherwise>
        </choose>
        
        LIMIT #{limit} OFFSET #{offset}
    </select>
    
    <!-- 필터 적용된 게시글 총 개수 조회 -->
    <select id="countPostsWithFilters" resultType="int">
        SELECT COUNT(*)
        FROM 
            board_posts p
            LEFT JOIN boards b ON p.board_id = b.id
            LEFT JOIN users u ON p.author_email = u.email
        <where>
            p.board_id = #{boardId}
            AND p.is_deleted = false
            
            <if test="keyword != null and keyword != ''">
                <choose>
                    <when test="searchField == 'title'">
                        AND p.title LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="searchField == 'content'">
                        AND p.content LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="searchField == 'author'">
                        AND (u.name LIKE CONCAT('%', #{keyword}, '%') 
                        OR u.nickname LIKE CONCAT('%', #{keyword}, '%'))
                    </when>
                    <otherwise>
                        AND (p.title LIKE CONCAT('%', #{keyword}, '%') 
                        OR p.content LIKE CONCAT('%', #{keyword}, '%'))
                    </otherwise>
                </choose>
            </if>
            
            <if test="startDate != null">
                AND p.created_at &gt;= #{startDate}
            </if>
            
            <if test="endDate != null">
                AND p.created_at &lt;= #{endDate}
            </if>
        </where>
    </select>
    
    <!-- 결과 매핑 -->
    <resultMap id="postResultMap" type="com.example.demo.model.board.Post">
        <id property="id" column="id"/>
        <result property="boardId" column="board_id"/>
        <result property="authorEmail" column="author_email"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="deletedAt" column="deleted_at"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="boardName" column="board_name"/>
        <result property="authorName" column="author_name"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="authorProfileImage" column="author_profile_image"/>
    </resultMap>
</mapper>
