<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.board.BoardMemberMapper">
    
    <!-- 멤버 추가 -->
    <insert id="addMember" parameterType="com.example.demo.model.board.BoardMember">
        INSERT INTO board_members (
            board_id, user_email, role, status, created_at
        ) VALUES (
            #{boardId}, #{userEmail}, #{role}, #{status}, NOW()
        )
        <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    
    <!-- 게시판 멤버 목록 조회 -->
    <select id="findMembersByBoardId" resultMap="boardMemberResultMap">
        SELECT 
            bm.*,
            u.name as user_name,
            u.nickname as user_nickname,
            u.profile_image_path as user_profile_image
        FROM 
            board_members bm
            LEFT JOIN users u ON bm.user_email = u.email
        WHERE 
            bm.board_id = #{boardId}
        ORDER BY 
            CASE WHEN bm.role = 'ADMIN' THEN 0 ELSE 1 END,
            bm.id
    </select>
    
    <!-- 특정 멤버 조회 -->
    <select id="findMemberById" resultMap="boardMemberResultMap">
        SELECT 
            bm.*, u.nickname as user_name, u.profile_image_path
        FROM 
            board_members bm
            LEFT JOIN users u ON bm.user_email = u.email
        WHERE 
            bm.id = #{id}
    </select>
    
    <!-- 특정 사용자의 게시판 멤버십 조회 -->
    <select id="findMemberByBoardIdAndUserEmail" resultMap="boardMemberResultMap">
        SELECT 
            bm.*, u.nickname as user_name, u.profile_image_path
        FROM 
            board_members bm
            LEFT JOIN users u ON bm.user_email = u.email
        WHERE 
            bm.board_id = #{boardId}
            AND bm.user_email = #{userEmail}
    </select>
    
    <!-- 이메일과 게시판 ID로 게시판 멤버 조회 -->
    <select id="findBoardMemberByEmailAndBoardId" resultMap="boardMemberResultMap">
        SELECT 
            bm.*
        FROM 
            board_members bm
        WHERE 
            bm.user_email = #{email}
            AND bm.board_id = #{boardId}
    </select>
    
    <!-- 멤버 역할 업데이트 -->
    <update id="updateMemberRole">
        UPDATE board_members
        SET 
            role = #{role}
        WHERE 
            id = #{id}
    </update>
    
    <!-- 멤버 상태 업데이트 -->
    <update id="updateMemberStatus">
        UPDATE board_members
        SET 
            status = #{status}
        WHERE 
            id = #{id}
    </update>
    
    <!-- 멤버 삭제 -->
    <delete id="deleteMember">
        DELETE FROM board_members
        WHERE id = #{id}
    </delete>
    
    <!-- 게시판의 모든 멤버 삭제 -->
    <delete id="deleteAllMembersByBoardId">
        DELETE FROM board_members
        WHERE board_id = #{boardId}
    </delete>
    
    <!-- 결과 매핑 -->
    <resultMap id="boardMemberResultMap" type="com.example.demo.model.board.BoardMember">
        <id property="id" column="id"/>
        <result property="boardId" column="board_id"/>
        <result property="userEmail" column="user_email"/>
        <result property="role" column="role"/>
        <result property="status" column="status"/>
        <result property="joinedAt" column="joined_at"/>
        <result property="invitedBy" column="invited_by"/>
        <result property="userName" column="user_name"/>
        <result property="profileImagePath" column="profile_image_path"/>
    </resultMap>
    
</mapper>
