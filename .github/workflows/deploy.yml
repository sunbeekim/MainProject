name: Deploy All Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      job_name:
        description: 'Job to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - deploy-locally

jobs:
  docker-login:
    runs-on: self-hosted
    steps:
      - name: Docker Hub 로그인
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker info  # Docker 데몬 상태 확인

  build-and-deploy-flask:
    runs-on: self-hosted
    needs: docker-login
    steps:
      - uses: actions/checkout@v2
      - name: Build & Push Flask AI Service
        run: |
          # 로그인 재시도
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          # 빌드 및 푸시 시도
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/flask-ai:latest ./Flask || exit 1
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/flask-ai:latest || exit 1
          # 상태 확인
          docker images | grep flask-ai
          docker logout

  build-and-deploy-gateway:
    runs-on: self-hosted
    needs: build-and-deploy-flask
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build Spring Gateway
        shell: bash
        run: |
          cd GateWay
          chmod +x ./gradlew
          ./gradlew clean build
      - name: Build & Push Gateway Docker Image
        shell: bash
        run: |
          # 로그인 재시도
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          # 빌드 및 푸시
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-service:latest ./GateWay || exit 1
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-service:latest || exit 1
          # 로그아웃
          docker logout

  build-and-deploy-core:
    runs-on: self-hosted
    needs: build-and-deploy-gateway
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build Core Spring Service
        shell: bash
        run: |
          cd CoreService
          chmod +x ./gradlew
          ./gradlew clean build
      - name: Build & Push Core Docker Image
        shell: bash
        run: |
          # 로그인 재시도
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          # 빌드 및 푸시
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/core-service:latest ./CoreService || exit 1
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/core-service:latest || exit 1
          # 로그아웃
          docker logout

  build-and-deploy-assist:
    runs-on: self-hosted
    needs: build-and-deploy-core
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build Assist Service
        shell: bash
        run: |
          cd AssistService
          chmod +x ./gradlew
          ./gradlew clean build
      - name: Build & Push Assist Docker Image
        shell: bash
        run: |
          # 로그인 재시도
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          # 빌드 및 푸시
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/assist-service:latest ./AssistService || exit 1
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/assist-service:latest || exit 1
          # 로그아웃
          docker logout

  build-and-deploy-frontend:
    runs-on: self-hosted
    needs: build-and-deploy-assist
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Build Frontend
        shell: bash
        run: |
          cd vite-react-teamsketch
          npm install
          npm run build
      - name: Build & Push Frontend Docker Image
        shell: bash
        run: |
          # 로그인 재시도
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          # 빌드 및 푸시
          docker build --build-arg ENV=prod -t ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest ./vite-react-teamsketch || exit 1
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest || exit 1
          # 로그아웃
          docker logout

  deploy-locally:
    runs-on: self-hosted
    needs: [build-and-deploy-frontend]
    if: ${{ github.event.inputs.job_name == 'deploy-locally' || github.event.inputs.job_name == 'all' || github.event_name == 'push' }}
    steps:
      - name: Deploy All Services
        shell: bash
        run: |
          # 네트워크 확인
          if ! docker network ls | grep -q teamsketch-network; then
            echo "Creating new network..."
            docker network create teamsketch-network
          else
            echo "Using existing network..."
          fi
          
          # 컨테이너 중지 및 제거
          docker stop flask-container gateway-container core-container assist-container frontend-container || true
          docker rm flask-container gateway-container core-container assist-container frontend-container || true
          
          # 새 컨테이너 실행
          docker run -d --name flask-container \
            --network teamsketch-network \
            -p 8001:8001 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/flask-ai:latest

          docker run -d --name gateway-container \
            --network teamsketch-network \
            -p 8080:8080 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-service:latest

          docker run -d --name core-container \
            --network teamsketch-network \
            -p 8081:8081 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/core-service:latest

          # 어시스트 서버 실행
          docker run -d --name assist-container \
            --network teamsketch-network \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://sunbee.world:3306/project_db \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 8082:8082 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/assist-service:latest

          # 프론트엔드 서버 실행
          docker run -d --name frontend-container \
            --network teamsketch-network \
            -p 80:80 -p 443:443 \
            -v "$(pwd)/nginx/ssl/live/sunbee.world:/etc/nginx/ssl/live/sunbee.world:ro" \
            ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest

          # 컨테이너 상태 확인
          echo "Container Status:"
          docker ps -a | grep assist
          echo "Container Logs:"
          docker logs assist-container
