name: Deploy All Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      job_name:
        description: 'Job to run (deploy-locally for local deployment only)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - deploy-locally

jobs:
  docker-login:
    runs-on: self-hosted
    steps:
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

  build-and-deploy-flask:
    runs-on: self-hosted
    needs: docker-login
    steps:
      - uses: actions/checkout@v2
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build Flask AI Service
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/flask-ai:latest ./Flask
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/flask-ai:latest

  build-and-deploy-gateway:
    runs-on: self-hosted
    needs: build-and-deploy-flask
    steps:
      - uses: actions/checkout@v2
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build Spring Gateway
        shell: powershell
        run: |
          cd GateWay
          .\gradlew.bat clean build
      - name: Build & Push Gateway Docker Image
        shell: powershell
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-service:latest ./GateWay
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-service:latest

  build-and-deploy-core:
    runs-on: self-hosted
    needs: build-and-deploy-gateway
    steps:
      - uses: actions/checkout@v2
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build Core Spring Service
        shell: powershell
        run: |
          cd CoreService
          .\gradlew.bat clean build
      - name: Build & Push Core Docker Image
        shell: powershell
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/core-service:latest ./CoreService
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/core-service:latest

  build-and-deploy-assist:
    runs-on: self-hosted
    needs: build-and-deploy-core
    steps:
      - uses: actions/checkout@v2
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build Assist Spring Service
        shell: powershell
        run: |
          cd AssistService
          .\gradlew.bat clean build
      - name: Build & Push Assist Docker Image
        shell: powershell
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/assist-service:latest ./AssistService
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/assist-service:latest

  build-and-deploy-frontend:
    runs-on: self-hosted
    needs: build-and-deploy-assist
    steps:
      - uses: actions/checkout@v2
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
      - name: Build Frontend
        run: |
          cd vite-react-teamsketch
          npm install
          npm run build
      - name: Build & Push Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest ./vite-react-teamsketch
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest

  build-and-deploy-nginx:
    runs-on: self-hosted
    needs: build-and-deploy-frontend
    steps:
      - uses: actions/checkout@v2
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build & Push Nginx Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-service:latest ./vite-react-teamsketch/nginx
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-service:latest

  deploy-locally:
    runs-on: self-hosted
    needs: [build-and-deploy-nginx]
    if: ${{ github.event.inputs.job_name == 'deploy-locally' || github.event.inputs.job_name == 'all' || github.event_name == 'push' }}
    steps:
      - name: Try Bash then PowerShell
        id: deploy
        continue-on-error: true
        shell: bash
        run: |
          # Linux/MacOS 명령어
          if ! docker network ls | grep -q "teamsketch-network"; then
            echo "Creating new network..."
            docker network create teamsketch-network
          else
            echo "Using existing network..."
          fi
          
          # 컨테이너 중지 및 제거
          docker stop flask-container gateway-container core-container assist-container frontend-container nginx-container 2>/dev/null || true
          docker rm flask-container gateway-container core-container assist-container frontend-container nginx-container 2>/dev/null || true
          
          # 새 컨테이너 실행
          docker run -d --name flask-container --network teamsketch-network -p 8001:8001 ${{ secrets.DOCKER_HUB_USERNAME }}/flask-ai:latest
          docker run -d --name gateway-container --network teamsketch-network -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-service:latest
          docker run -d --name core-container --network teamsketch-network -p 8081:8081 ${{ secrets.DOCKER_HUB_USERNAME }}/core-service:latest
          docker run -d --name assist-container --network teamsketch-network -p 8082:8082 ${{ secrets.DOCKER_HUB_USERNAME }}/assist-service:latest
          docker run -d --name frontend-container --network teamsketch-network -p 3000:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest
          docker run -d --name nginx-container --network teamsketch-network -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-service:latest

      - name: Fallback to PowerShell
        if: steps.deploy.outcome == 'failure'
        shell: powershell
        run: |
          # Windows(PowerShell) 명령어
          $network = docker network ls --filter name=teamsketch-network -q
          if (-not $network) {
              Write-Host "Creating new network..."
              docker network create teamsketch-network
          } else {
              Write-Host "Using existing network..."
          }
          
          # Windows 컨테이너 중지 및 제거
          docker stop flask-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not running" }
          docker stop gateway-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not running" }
          docker stop core-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not running" }
          docker stop assist-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not running" }
          docker stop frontend-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not running" }
          docker stop nginx-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not running" }
          
          docker rm flask-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not found" }
          docker rm gateway-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not found" }
          docker rm core-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not found" }
          docker rm assist-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not found" }
          docker rm frontend-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not found" }
          docker rm nginx-container; if ($LASTEXITCODE -ne 0) { Write-Host "Container not found" }
          
          # 새 컨테이너 실행
          docker run -d --name flask-container --network teamsketch-network -p 8001:8001 ${{ secrets.DOCKER_HUB_USERNAME }}/flask-ai:latest
          docker run -d --name gateway-container --network teamsketch-network -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-service:latest
          docker run -d --name core-container --network teamsketch-network -p 8081:8081 ${{ secrets.DOCKER_HUB_USERNAME }}/core-service:latest
          docker run -d --name assist-container --network teamsketch-network -p 8082:8082 ${{ secrets.DOCKER_HUB_USERNAME }}/assist-service:latest
          docker run -d --name frontend-container --network teamsketch-network -p 3000:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest
          docker run -d --name nginx-container --network teamsketch-network -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-service:latest
