events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    upstream frontend {
        server frontend-container:3000;
    }

    upstream gateway-service {
        server gateway-container:8080;
    }

    upstream core-service {
        server core-container:8081;
    }

    upstream assist-service {
        server assist-container:8082; 
    }

    upstream flask-service {
        server flask-container:8001;
    }

    # HTTP -> HTTPS 리다이렉트
    server {
        listen 80;
        server_name sunbee.world www.sunbee.world;
        
        # Let's Encrypt 인증을 위한 예외 처리
        location /.well-known/acme-challenge/ {
            root /var/www/html;
        }
        
        return 301 https://$host$request_uri;
    }

    # HTTPS 서버
    server {
        listen 443 ssl;
        server_name sunbee.world www.sunbee.world;

        ssl_certificate /nginx/ssl/live/sunbee.world/fullchain.pem;
        ssl_certificate_key /nginx/ssl/live/sunbee.world/privkey.pem;
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        
        client_max_body_size 100M;

        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        # 정적 파일 처리
        location /assets/ {
            root /usr/share/nginx/html;  # assets 폴더도 직접 서빙
            expires max;
            log_not_found off;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map|html)$ {
            expires max;
            add_header Cache-Control "public, no-transform";
            log_not_found off;
            access_log off;
        }

        # API 라우팅 설정
        location /api/ {
            proxy_pass http://gateway-container:8080;  # 모든 API 요청은 게이트웨이로
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin $http_origin;
    
            proxy_connect_timeout 180s;
            proxy_send_timeout 120s;
            proxy_read_timeout 300s;
            send_timeout 300s;
    
            # OPTIONS 요청 처리
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' "$http_origin" always;  # 동적 Origin 처리
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                return 204;
            }
    
            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }

        # 직접적인 서비스 라우팅 제거 (모든 요청은 게이트웨이를 통해)
        # location /api/core/ 섹션 제거
        # location /api/assist/ 섹션 제거
    }
}
